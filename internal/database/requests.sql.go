// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: requests.sql

package database

import (
	"context"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO requests (created_at, updated_at, offset, results_per_page)
VALUES (
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    ?,
    ?
)
RETURNING id, created_at, updated_at, "offset", results_per_page
`

type CreateRequestParams struct {
	Offset         int64
	ResultsPerPage int64
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, createRequest, arg.Offset, arg.ResultsPerPage)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Offset,
		&i.ResultsPerPage,
	)
	return i, err
}

const getRequests = `-- name: GetRequests :many
SELECT offset, results_per_page FROM requests
`

type GetRequestsRow struct {
	Offset         int64
	ResultsPerPage int64
}

func (q *Queries) GetRequests(ctx context.Context) ([]GetRequestsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRequestsRow
	for rows.Next() {
		var i GetRequestsRow
		if err := rows.Scan(&i.Offset, &i.ResultsPerPage); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
