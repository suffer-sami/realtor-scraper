// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: phones.sql

package database

import (
	"context"
	"database/sql"
)

const createPhone = `-- name: CreatePhone :one
INSERT INTO phones (ext, number, type, is_valid)
VALUES (
    ?,
    ?,
    ?,
    ?
)
ON CONFLICT(ext, number, type) DO NOTHING
RETURNING id
`

type CreatePhoneParams struct {
	Ext     sql.NullString
	Number  sql.NullString
	Type    sql.NullString
	IsValid sql.NullBool
}

func (q *Queries) CreatePhone(ctx context.Context, arg CreatePhoneParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPhone,
		arg.Ext,
		arg.Number,
		arg.Type,
		arg.IsValid,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPhoneID = `-- name: GetPhoneID :one
SELECT id FROM phones
WHERE ext = ? AND number = ? AND type = ? 
LIMIT 1
`

type GetPhoneIDParams struct {
	Ext    sql.NullString
	Number sql.NullString
	Type   sql.NullString
}

func (q *Queries) GetPhoneID(ctx context.Context, arg GetPhoneIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPhoneID, arg.Ext, arg.Number, arg.Type)
	var id int64
	err := row.Scan(&id)
	return id, err
}
