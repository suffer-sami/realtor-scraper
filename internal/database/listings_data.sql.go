// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: listings_data.sql

package database

import (
	"context"
	"database/sql"
)

const createListingsData = `-- name: CreateListingsData :one
INSERT INTO listings_data (count, min, max, last_listing_date, agent_id)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?
)
ON CONFLICT (agent_id) 
DO UPDATE SET
    count = EXCLUDED.count,
    min = EXCLUDED.min,
    max = EXCLUDED.max,
    last_listing_date = EXCLUDED.last_listing_date
RETURNING id, count, min, max, last_listing_date, agent_id
`

type CreateListingsDataParams struct {
	Count           sql.NullInt64
	Min             sql.NullInt64
	Max             sql.NullInt64
	LastListingDate sql.NullTime
	AgentID         sql.NullString
}

func (q *Queries) CreateListingsData(ctx context.Context, arg CreateListingsDataParams) (ListingsDatum, error) {
	row := q.db.QueryRowContext(ctx, createListingsData,
		arg.Count,
		arg.Min,
		arg.Max,
		arg.LastListingDate,
		arg.AgentID,
	)
	var i ListingsDatum
	err := row.Scan(
		&i.ID,
		&i.Count,
		&i.Min,
		&i.Max,
		&i.LastListingDate,
		&i.AgentID,
	)
	return i, err
}
