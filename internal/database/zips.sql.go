// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: zips.sql

package database

import (
	"context"
	"database/sql"
)

const createZip = `-- name: CreateZip :one
INSERT INTO zips (zip_code)
VALUES (?)
ON CONFLICT(zip_code) DO NOTHING
RETURNING id, zip_code
`

func (q *Queries) CreateZip(ctx context.Context, zipCode sql.NullString) (Zip, error) {
	row := q.db.QueryRowContext(ctx, createZip, zipCode)
	var i Zip
	err := row.Scan(&i.ID, &i.ZipCode)
	return i, err
}

const getZip = `-- name: GetZip :one
SELECT id, zip_code FROM zips 
WHERE zip_code = ? 
LIMIT 1
`

func (q *Queries) GetZip(ctx context.Context, zipCode sql.NullString) (Zip, error) {
	row := q.db.QueryRowContext(ctx, getZip, zipCode)
	var i Zip
	err := row.Scan(&i.ID, &i.ZipCode)
	return i, err
}
