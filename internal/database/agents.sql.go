// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: agents.sql

package database

import (
	"context"
	"database/sql"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (
    id,
    created_at,
    updated_at,
    first_name,
    last_name,
    nick_name,
    person_name,
    title,
    slogan,
    email,
    agent_rating,
    description,
    recommendations_count,
    review_count,
    last_updated,
    first_month,
    first_year,
    photo,
    video,
    profile_url,
    website
)
VALUES (
    ?, -- id
    CURRENT_TIMESTAMP, -- created_at
    CURRENT_TIMESTAMP, -- updated_at
    ?, -- first_name
    ?, -- last_name
    ?, -- nick_name
    ?, -- person_name
    ?, -- title
    ?, -- slogan
    ?, -- email
    ?, -- agent_rating
    ?, -- description
    ?, -- recommendations_count
    ?, -- review_count
    ?, -- last_updated
    ?, -- first_month
    ?, -- first_year
    ?, -- photo
    ?, -- video
    ?, -- profile_url
    ?  -- website
)
RETURNING id, created_at, updated_at, profile_url, first_name, last_name, nick_name, person_name, title, slogan, email, description, video, photo, website, agent_rating, recommendations_count, review_count, first_month, first_year, last_updated, address_id, broker_id, office_id
`

type CreateAgentParams struct {
	ID                   string
	FirstName            sql.NullString
	LastName             sql.NullString
	NickName             sql.NullString
	PersonName           sql.NullString
	Title                sql.NullString
	Slogan               sql.NullString
	Email                sql.NullString
	AgentRating          sql.NullInt64
	Description          sql.NullString
	RecommendationsCount sql.NullInt64
	ReviewCount          sql.NullInt64
	LastUpdated          sql.NullTime
	FirstMonth           sql.NullInt64
	FirstYear            sql.NullInt64
	Photo                sql.NullString
	Video                sql.NullString
	ProfileUrl           sql.NullString
	Website              sql.NullString
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.NickName,
		arg.PersonName,
		arg.Title,
		arg.Slogan,
		arg.Email,
		arg.AgentRating,
		arg.Description,
		arg.RecommendationsCount,
		arg.ReviewCount,
		arg.LastUpdated,
		arg.FirstMonth,
		arg.FirstYear,
		arg.Photo,
		arg.Video,
		arg.ProfileUrl,
		arg.Website,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileUrl,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.PersonName,
		&i.Title,
		&i.Slogan,
		&i.Email,
		&i.Description,
		&i.Video,
		&i.Photo,
		&i.Website,
		&i.AgentRating,
		&i.RecommendationsCount,
		&i.ReviewCount,
		&i.FirstMonth,
		&i.FirstYear,
		&i.LastUpdated,
		&i.AddressID,
		&i.BrokerID,
		&i.OfficeID,
	)
	return i, err
}

const getAgent = `-- name: GetAgent :one
SELECT id, created_at, updated_at, profile_url, first_name, last_name, nick_name, person_name, title, slogan, email, description, video, photo, website, agent_rating, recommendations_count, review_count, first_month, first_year, last_updated, address_id, broker_id, office_id FROM agents WHERE id = ?
`

func (q *Queries) GetAgent(ctx context.Context, id string) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgent, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProfileUrl,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.PersonName,
		&i.Title,
		&i.Slogan,
		&i.Email,
		&i.Description,
		&i.Video,
		&i.Photo,
		&i.Website,
		&i.AgentRating,
		&i.RecommendationsCount,
		&i.ReviewCount,
		&i.FirstMonth,
		&i.FirstYear,
		&i.LastUpdated,
		&i.AddressID,
		&i.BrokerID,
		&i.OfficeID,
	)
	return i, err
}

const updateAgentForeignKeys = `-- name: UpdateAgentForeignKeys :exec
UPDATE agents
SET 
    address_id = ?,
    broker_id = ?,
    office_id = ?
WHERE id = ?
`

type UpdateAgentForeignKeysParams struct {
	AddressID sql.NullInt64
	BrokerID  sql.NullInt64
	OfficeID  sql.NullInt64
	ID        string
}

func (q *Queries) UpdateAgentForeignKeys(ctx context.Context, arg UpdateAgentForeignKeysParams) error {
	_, err := q.db.ExecContext(ctx, updateAgentForeignKeys,
		arg.AddressID,
		arg.BrokerID,
		arg.OfficeID,
		arg.ID,
	)
	return err
}
