// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: agents.sql

package database

import (
	"context"
	"database/sql"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (
    id,
    created_at,
    updated_at,
    first_name,
    last_name,
    nick_name,
    person_name,
    title,
    slogan,
    email,
    agent_rating,
    description,
    recommendations_count,
    review_count,
    last_updated,
    first_month,
    first_year,
    video,
    web_url,
    href
)
VALUES (
    ?, -- id
    CURRENT_TIMESTAMP, -- created_at
    CURRENT_TIMESTAMP, -- updated_at
    ?, -- first_name
    ?, -- last_name
    ?, -- nick_name
    ?, -- person_name
    ?, -- title
    ?, -- slogan
    ?, -- email
    ?, -- agent_rating
    ?, -- description
    ?, -- recommendations_count
    ?, -- review_count
    ?, -- last_updated
    ?, -- first_month
    ?, -- first_year
    ?, -- video
    ?, -- web_url
    ?  -- href
)
RETURNING id, created_at, updated_at, first_name, last_name, nick_name, person_name, title, slogan, email, agent_rating, description, recommendations_count, review_count, last_updated, first_month, first_year, video, web_url, href
`

type CreateAgentParams struct {
	ID                   string
	FirstName            sql.NullString
	LastName             sql.NullString
	NickName             sql.NullString
	PersonName           sql.NullString
	Title                sql.NullString
	Slogan               sql.NullString
	Email                sql.NullString
	AgentRating          sql.NullInt64
	Description          sql.NullString
	RecommendationsCount sql.NullInt64
	ReviewCount          sql.NullInt64
	LastUpdated          sql.NullTime
	FirstMonth           sql.NullInt64
	FirstYear            sql.NullInt64
	Video                sql.NullString
	WebUrl               sql.NullString
	Href                 sql.NullString
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.NickName,
		arg.PersonName,
		arg.Title,
		arg.Slogan,
		arg.Email,
		arg.AgentRating,
		arg.Description,
		arg.RecommendationsCount,
		arg.ReviewCount,
		arg.LastUpdated,
		arg.FirstMonth,
		arg.FirstYear,
		arg.Video,
		arg.WebUrl,
		arg.Href,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.PersonName,
		&i.Title,
		&i.Slogan,
		&i.Email,
		&i.AgentRating,
		&i.Description,
		&i.RecommendationsCount,
		&i.ReviewCount,
		&i.LastUpdated,
		&i.FirstMonth,
		&i.FirstYear,
		&i.Video,
		&i.WebUrl,
		&i.Href,
	)
	return i, err
}
