// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: areas.sql

package database

import (
	"context"
	"database/sql"
)

const createArea = `-- name: CreateArea :one
INSERT INTO areas (name, state_code)
VALUES (
    ?,
    ?
)
ON CONFLICT(name, state_code) DO NOTHING
RETURNING id
`

type CreateAreaParams struct {
	Name      sql.NullString
	StateCode sql.NullString
}

func (q *Queries) CreateArea(ctx context.Context, arg CreateAreaParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createArea, arg.Name, arg.StateCode)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAreaID = `-- name: GetAreaID :one
SELECT id FROM areas
WHERE name = ? AND state_code = ?
LIMIT 1
`

type GetAreaIDParams struct {
	Name      sql.NullString
	StateCode sql.NullString
}

func (q *Queries) GetAreaID(ctx context.Context, arg GetAreaIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAreaID, arg.Name, arg.StateCode)
	var id int64
	err := row.Scan(&id)
	return id, err
}
