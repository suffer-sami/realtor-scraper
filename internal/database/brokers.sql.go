// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: brokers.sql

package database

import (
	"context"
	"database/sql"
)

const createBroker = `-- name: CreateBroker :one
INSERT INTO brokers (fulfillment_id, name, photo, video)
VALUES (
    ?,
    ?,
    ?,
    ?
)
ON CONFLICT(fulfillment_id) DO NOTHING
RETURNING id, fulfillment_id, name, photo, video
`

type CreateBrokerParams struct {
	FulfillmentID sql.NullInt64
	Name          sql.NullString
	Photo         sql.NullString
	Video         sql.NullString
}

func (q *Queries) CreateBroker(ctx context.Context, arg CreateBrokerParams) (Broker, error) {
	row := q.db.QueryRowContext(ctx, createBroker,
		arg.FulfillmentID,
		arg.Name,
		arg.Photo,
		arg.Video,
	)
	var i Broker
	err := row.Scan(
		&i.ID,
		&i.FulfillmentID,
		&i.Name,
		&i.Photo,
		&i.Video,
	)
	return i, err
}

const getBroker = `-- name: GetBroker :one
SELECT id, fulfillment_id, name, photo, video FROM brokers
WHERE fulfillment_id = ? 
LIMIT 1
`

func (q *Queries) GetBroker(ctx context.Context, fulfillmentID sql.NullInt64) (Broker, error) {
	row := q.db.QueryRowContext(ctx, getBroker, fulfillmentID)
	var i Broker
	err := row.Scan(
		&i.ID,
		&i.FulfillmentID,
		&i.Name,
		&i.Photo,
		&i.Video,
	)
	return i, err
}
