// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: offices.sql

package database

import (
	"context"
	"database/sql"
)

const createOffice = `-- name: CreateOffice :one
INSERT INTO offices (name, photo, website, email, slogan, video, fulfillment_id, address_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(fulfillment_id) DO NOTHING
RETURNING id
`

type CreateOfficeParams struct {
	Name          sql.NullString
	Photo         sql.NullString
	Website       sql.NullString
	Email         sql.NullString
	Slogan        sql.NullString
	Video         sql.NullString
	FulfillmentID sql.NullInt64
	AddressID     sql.NullInt64
}

func (q *Queries) CreateOffice(ctx context.Context, arg CreateOfficeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createOffice,
		arg.Name,
		arg.Photo,
		arg.Website,
		arg.Email,
		arg.Slogan,
		arg.Video,
		arg.FulfillmentID,
		arg.AddressID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOfficeID = `-- name: GetOfficeID :one
SELECT id FROM offices
WHERE fulfillment_id = ? 
LIMIT 1
`

func (q *Queries) GetOfficeID(ctx context.Context, fulfillmentID sql.NullInt64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getOfficeID, fulfillmentID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
